# Example query
query HeroNameAndFriends($episode: Episode) {
  hero(episode: $episode) {
    name
    friends {
      name
    }
  }
}

query {
  books {
    id
    title
    subtitle
  }
}

#* SQL: select firstName, lastName from users; -> below equivalent in graphQL
query {
  users {
    firstName
    lastName
  }
}

# Primitives + Objects
query {
  books {
    title
    authors {
      firstName
      lastName
    }
    reviews {
      user {
        firstName
        lastName
      }
      rating
      comment
    }
  }
}

query {
  books {
    # Book / Object type
    title # String / Scalar type
    reviews {
      # List of Review / Object types
      rating # Int / Scalar type
      user {
        # Person / Object type
        firstName # String / Scalar type
        lastName # String / Scalar type
      }
    }
  }
}

# Query parameters - position not important!
query {
  reviews(page: 1, first: 2) {
    rating
    comment
    status
  }
}

query {
  reviews(id: ID) {
    # ID! -> not null value!
    rating
    comment
    status
  }
}

query {
  reviews(status: [FLAGGED]) {
    rating
    comment
    status
    user {
      firstName
      lastName
    }
  }
}

# Variables
query ModeratorReviews($status: [ReviewsStatus!]) {
  reviews(status: $status) {
    rating
    comment
    status
    user {
      firstName
      lastName
    }
  }
}

query BooksQuery($page: Int, $first: Int) {
  books(page: $page, first: $first) {
    id
    title
    pageCount
    rating
  }
}

# Interfaces
interface Inventory {
  id: ID!
  name: String
  description: String
  price: Int
}

type Food implements Inventory {
  Calories: Int
  Carbs: Int
  Fat: Int
}

# Aliases & Fragments
interface Book {
  title: String
  subtitle: String
  description: String
  pageCount: Int
  rating: Int
}

fragment BookFields on Book {
  title
  subtitle
  description
  pageCount
  rating
}

query TwoBooks {
  book1: book(id: "1") {
    ...BookFields
  }
  book2: book(id: "1") {
    ...BookFields
  }
}
